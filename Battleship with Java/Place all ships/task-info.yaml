type: edu
files:
  - name: src/battleship/Main.java
    visible: true
    text: |
      package battleship;
      
      public class Main {
      
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: test/Tests.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      
      public class Tests extends StageTest<String> {
        @DynamicTest
        CheckResult test1() {
      
          TestedProgram main = new TestedProgram();
          String output = main.start().trim();
          String[][] matrix;
      
          if (!output.toLowerCase().contains("aircraft carrier")) {
            return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
          }
      
          output = main.execute("F3 F7").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "F3 F7");
      
          if (!output.toLowerCase().contains("battleship")) {
            return CheckResult.wrong("After asking for the Aircraft Carrier " +
                    "coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
          }
      
          output = main.execute("A1 D1").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "A1 D1");
      
          if (!output.toLowerCase().contains("submarine")) {
            return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
          }
      
          output = main.execute("J7 J10").trim();
          if (isGameFieldPrinted(output)) {
            return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
          }
      
          output = main.execute("J10 J8").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "J10 J8");
      
          if (!output.toLowerCase().contains("cruiser")) {
            return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
          }
      
          output = main.execute("B9 D8").trim();
          if (isGameFieldPrinted(output)) {
            return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
          }
      
          output = main.execute("B9 D9").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "B9 D9");
      
          if (!output.toLowerCase().contains("destroyer")) {
            return CheckResult.wrong("After asking for the Cruiser coordinates, " +
                    "you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
          }
      
          output = main.execute("E6 D6").trim();
          if (isGameFieldPrinted(output)) {
            return CheckResult.wrong(
                    "Your program should not print a game field " +
                            "if there is an input mistake. " +
                            "(Too close to another ship)");
          }
      
          if (!output.toLowerCase().contains("error")) {
            return CheckResult.wrong(
                    "Your program should report an error " +
                            "if there is an input mistake. " +
                            "(Too close to another ship)");
          }
      
          output = main.execute("I2 J2").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "I2 J2");
      
          return CheckResult.correct();
        }
      
        @DynamicTest
        CheckResult test2() {
      
          TestedProgram main = new TestedProgram();
          String output = main.start().trim();
          String[][] matrix;
      
          if (!output.toLowerCase().contains("aircraft carrier")) {
            return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
          }
      
          output = main.execute("J3 J7").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "J3 J7");
      
          if (!output.toLowerCase().contains("battleship")) {
            return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
          }
      
          output = main.execute("C8 B8").trim();
          if (isGameFieldPrinted(output)) {
            return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
          }
      
          output = main.execute("C8 F8").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "C8 F8");
      
          if (!output.toLowerCase().contains("submarine")) {
            return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
          }
      
          output = main.execute("A1 C2").trim();
          if (isGameFieldPrinted(output)) {
            return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
          }
      
          output = main.execute("A1 C1").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "A1 C1");
      
          if (!output.toLowerCase().contains("cruiser")) {
            return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
          }
      
          output = main.execute("H1 H3").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "H1 H3");
      
          if (!output.toLowerCase().contains("destroyer")) {
            return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
          }
      
          output = main.execute("G2 E2").trim();
          if (isGameFieldPrinted(output)) {
            return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
          }
      
          output = main.execute("B5 C5").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "B5 C5");
      
          return CheckResult.correct();
        }
      
        void findShipByCoordinates(String[][] matrix, String coordinates) {
          int[] coordinatesInt = parseCoordinates(coordinates);
      
          if (coordinatesInt[0] > coordinatesInt[2]) {
            int swap = coordinatesInt[0];
            coordinatesInt[0] = coordinatesInt[2];
            coordinatesInt[2] = swap;
          } else if (coordinatesInt[1] > coordinatesInt[3]) {
            int swap = coordinatesInt[1];
            coordinatesInt[1] = coordinatesInt[3];
            coordinatesInt[3] = swap;
          }
      
          if (coordinatesInt[0] == coordinatesInt[2]) {
            int cord = coordinatesInt[0];
            for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
              if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
              }
            }
          } else {
            int cord = coordinatesInt[1];
            for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
              if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
              }
            }
          }
        }
      
        int[] parseCoordinates(String coordinatesString) {
          String[] splittedCoords = coordinatesString.split(" ");
          int[] parsedCoordinates = new int[4];
      
          parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
          parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
          parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
          parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;
      
          return parsedCoordinates;
        }
      
        int charToInt(String charCoordinate) {
          charCoordinate = charCoordinate.toLowerCase();
          char character = charCoordinate.charAt(0);
          return (int) character - (int) 'a';
        }
      
        String[][] getFieldMatrix(String output) {
      
          WrongAnswer cantParseException = new WrongAnswer(
                  "Can't parse the game field\n" +
                          "Make sure you print it like in examples!");
      
          String[] splittedOutput = output.split("\n");
          String[][] matrix = new String[10][10];
      
          try {
            int index = 0;
            while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
              index++;
              if (index > 1000) {
                throw cantParseException;
              }
            }
            index++;
      
            for (int i = 0; i < 10; i++) {
              String temp = splittedOutput[index].substring(2).trim();
              if (temp.length() == 0) {
                throw cantParseException;
              }
              String[] splittedLine = temp.trim().split(" ");
              if (splittedLine.length != 10) {
                throw cantParseException;
              }
              matrix[i] = splittedLine;
              index++;
            }
          } catch (IndexOutOfBoundsException ignored) {
            throw cantParseException;
          }
      
          return matrix;
        }
      
        boolean isGameFieldPrinted(String output) {
          return output.contains("1") && output.contains("2") && output.contains("10");
        }
      
      }
    learner_created: false
  - name: src/battleship/Coordinate.java
    visible: true
    text: |
      package battleship;
      
      public class Coordinate implements Comparable<Coordinate> {
          private int row;
          private int col;
      
          public Coordinate( int row, int col){
              this.row = row;
              this.col = col;
          }
      
          public static int calculateDistance (Coordinate start, Coordinate end){
              if (start.getRow() == end.getRow()) {
                  return Math.abs(start.getCol() - end.getCol());
              } else if (start.getCol() == end.getCol()) {
                  return Math.abs(start.getRow() - end.getRow());
              } else {
                  return -1;
              }
          }
      
          public int getRow () {
              return row;
          }
      
          public int getCol () {
              return col;
          }
          @Override
          public int compareTo (Coordinate other){
              if (this.row != other.row) {
                  return this.row - other.row;
              } else {
                  return this.col - other.col;
              }
          }
      }
    learner_created: true
  - name: src/battleship/Board.java
    visible: true
    text: |+
      package battleship;
      
      import java.util.Arrays;
      public class Board {
      
          private static int BOARD_SIZE = 10; // Assumed size
          private char[][] board;
          public Board() {
              board = new char[BOARD_SIZE][BOARD_SIZE];
              for(int i = 0; i < BOARD_SIZE; i++) {
                  Arrays.fill(board[i], '~');
              }
          }
          public boolean placeShip(Ship ship, Coordinate start, Coordinate end) {
              if(!isPlacementValid(start, end)) {
                  return false;
              }
      
              if(start.getRow() == end.getRow()) {
                  return placeHorizontally(ship, start, end);
              } else {
                  return placeVertically(ship, start, end);
              }
          }
      
          private boolean isPlacementValid(Coordinate start, Coordinate end) {
              if(start.getRow() != end.getRow() && start.getCol() != end.getCol()) {
                  return false;
              }
              if(start.getRow() < 0 || start.getRow() >= BOARD_SIZE || start.getCol() < 0 || start.getCol() >= BOARD_SIZE) {
                  return false;
              }
              if (end.getRow() < 0 || end.getRow() >= BOARD_SIZE || end.getCol() < 0 || end.getCol() >= BOARD_SIZE) {
                  return false;
              }
              // This checks if the ship is placed diagonally
              if (Math.abs(start.getRow() - end.getRow()) == Math.abs(start.getCol() - end.getCol())) {
                  return false;
              }
              return true;
          }
      
      
          private boolean placeVertically(Ship ship, Coordinate start, Coordinate end) {
              int startRow = Math.min(start.getRow(), end.getRow());
              int endRow = Math.max(start.getRow(), end.getRow());
              int col = start.getCol();
              int shipSize = Coordinate.calculateDistance(start, end) + 1;
              if(endRow - startRow + 1 != shipSize) {
                  return false;
              }
              for(int i = startRow; i <= endRow; i++) {
                  if(board[i][col] != '~') {
                      return false;
                  }
              }
              for(int i = startRow; i <= endRow; i++) {
                  board[i][col] = 'O';
                  ship.addCoordinate(new Coordinate(i, col));
              }
              return true;
          }
      
      
          private boolean placeHorizontally(Ship ship, Coordinate start, Coordinate end) {
              int startCol = Math.min(start.getCol(), end.getCol());
              int endCol = Math.max(start.getCol(), end.getCol());
              int row = start.getRow();
              int shipSize = Coordinate.calculateDistance(start, end) + 1;
              if(endCol - startCol + 1 != shipSize) {
                  return false;
              }
              for(int i = startCol; i <= endCol; i++) {
                  if(board[row][i] != '~') {
                      return false;
                  }
              }
              for(int i = startCol; i <= endCol; i++) {
                  board[row][i] = 'O';
                  ship.addCoordinate(new Coordinate(row, i));
              }
              return true;
          }
      
          public void printBoard() {
              System.out.println("  1 2 3 4 5 6 7 8 9 10");
              for(int i = 0; i < BOARD_SIZE; i++) {
                  System.out.print((char) ('A' + i) + " ");
                  for(int j = 0; j < BOARD_SIZE; j++) {
                      System.out.print(board[i][j] + " ");
                  }
                  System.out.println();
              }
          }
      }
    
    learner_created: true
  - name: src/battleship/Ship.java
    visible: true
    text: |
      package battleship;
      
      import java.util.ArrayList;
      import java.util.List;
      
      public class Ship {
      
          private int length;
          private List<Coordinate> coordinates;
      
          public Ship(int length) {
              this.length = length;
              this.coordinates = new ArrayList<>();
          }
      
          public void addCoordinate(Coordinate coordinate) {
              coordinates.add(coordinate);
          }
      
          public int getLength() {
              return length;
          }
      
          public List<Coordinate> getCoordinates() {
              return coordinates;
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/35305#comment
status: Unchecked
record: -1
